<?xml-stylesheet type="text/css" href="../../resources/style/test.css" ?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="450" height="500" onload="windowTest()" viewBox="0 0 450 500"><text x="225" y="30" class="title">ECMA Script Secure Access to the Window Object</text><style type="text/css">.cellLabel,.cellStatus{stroke:#000;fill:#fff;shape-rendering:crispEdges}.label{font-size:12;font-family:sans-serif;fill:#000;text-anchor:start}.failedTest,.passedTest{stroke:none;shape-rendering:crispEdges}.passedTest{fill:#00c832}.failedTest{fill:#dc143c}#table{stroke:#000}.tableCell,.untested{shapeRendering:crispEdges}.untested{fill:gray;stroke:none}.tableCell{fill:none;stroke:#000}</style><script type="text/ecmascript"><![CDATA[

function windowTest() {
    evalTest();
    setIntervalTest();
    setTimeoutTest();
    getURLTest();
    alertTest();
    confirmTest();
    promptTest();
}

function evalTest() {
    var t = document.getElementById("eval");
    try {
        eval("dummyGetURL()");
        t.setAttributeNS(null, "class", "passedTest");
    } catch (e) {
        t.setAttributeNS(null, "class", "failedTest");
    }
}

function dummyGetURL(){
    alert('dummyGetURL');
    getURL('security3Include.svg', dummyFunction);
}

function dummyFunction() {
    System.out.println("===>> dummyFunction called");
}

function setIntervalTest(){
    var t = document.getElementById("setInterval");
    var intervalId;
   
    try {
        intervalId = setInterval(dummyFunction, 10000);
        t.setAttributeNS(null, "class", "passedTest");
    } catch (e) {
        t.setAttributeNS(null, "class", "failedTest");
        return; // Cannot test clearInterval
    }

    t = document.getElementById("clearInterval");

    try {
        window.clearInterval(intervalId);
        t.setAttributeNS(null, "class", "passedTest");
    } catch (e) {
        System.out.println("Got exception : " + e);
        t.setAttributeNS(null, "class", "failedTest");
    }
}

function setTimeoutTest(){
    var t = document.getElementById("setTimeout");
    var timeoutId = null;
   
    try {
        timeoutId = window.setTimeout(dummyFunction, 10000);
        t.setAttributeNS(null, "class", "passedTest");
    } catch (e) {
        t.setAttributeNS(null, "class", "failedTest");
        return; // Cannot test clearTimeout
    }

    t = document.getElementById("clearTimeout");

    try {
        window.clearTimeout(timeoutId);
        t.setAttributeNS(null, "class", "passedTest");
    } catch (e) {
        t.setAttributeNS(null, "class", "failedTest");
    }
}


function getURLTest(){
    var t = document.getElementById("getURL");
    try {
        getURL("security3Include.svg", processGetURL);
    } catch (e) {
        t.setAttributeNS(null, "class", "failedTest");
        return;
    }
}

function processGetURL(status){
    var t = document.getElementById("getURL");
    alert("status.success : " + status.success);
    if (status.success == false) {
        t.setAttributeNS(null, "class", "failedTest");
        return;
    }

    t.setAttributeNS(null, "class", "passedTest");

    t = document.getElementById("parseXML");
    try {
        var root = parseXML(status.content, document);
        if (root == null){
            t.setAttributeNS(null, "class", "failedTest");
        } else {
            t.setAttributeNS(null, "class", "passedTest");
        }
    } catch (e) {
        t.setAttributeNS(null, "class", "failedTest");
    }

}

function dummyProcessGetURL(status){
}

function alertTest(){
    var t = document.getElementById("alert");
    try {
        alert("alert() test");
        t.setAttributeNS(null, "class", "passedTest");
    } catch (e) {
        t.setAttributeNS(null, "class", "failedTest");
    }
}

function confirmTest(){
    var t = document.getElementById("confirm");
    try {
        confirm("confirm() test");
        t.setAttributeNS(null, "class", "passedTest");
    } catch (e) {
        t.setAttributeNS(null, "class", "failedTest");
    }
}

function promptTest(){
    var t = document.getElementById("prompt");
    try {
        prompt("prompt() test");
        t.setAttributeNS(null, "class", "passedTest");
    } catch (e) {
        t.setAttributeNS(null, "class", "failedTest");
    }
}

    ]]></script><g id="testTable" transform="translate(125, 150)"><g id="setIntervalTest"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="setInterval" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">setInterval</text></g><g id="clearIntervalTest" transform="translate(0, 20)"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="clearInterval" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">clearInterval</text></g><g id="setTimeoutTest" transform="translate(0, 40)"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="setTimeout" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">setTimeout</text></g><g id="clearTimeoutTest" transform="translate(0, 60)"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="clearTimeout" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">clearTimeout</text></g><g id="parseXMLTest" transform="translate(0, 80)"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="parseXML" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">parseXML</text></g><g id="getURLTest" transform="translate(0, 100)"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="getURL" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">getURL</text></g><g id="alertTest" transform="translate(0, 120)"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="alert" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">alert</text></g><g id="confirmTest" transform="translate(0, 140)"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="confirm" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">confirm</text></g><g id="promptTest" transform="translate(0, 160)"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="prompt" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">prompt</text></g><g id="evalTest" transform="translate(0, 160)"><rect width="200" height="20" class="cellLabel"/><rect width="20" height="20" x="200" class="cellStatus"/><rect id="eval" width="14" height="14" x="203" y="3" class="untested"/><text x="5" y="15" class="label">eval</text></g></g><script type="text/ecmascript"><![CDATA[
function onDone() {
    if (!(regardTestInstance == null)) {
        regardTestInstance.scriptDone();   
    } else {
        alert("This button only works when run in the regard framework");
    }
}
    ]]></script><g id="done" cursor="pointer" onclick="onDone()" transform="translate(195, 468)"><rect width="60" height="25" fill="#eee" stroke="#000" rx="5" ry="5"/><text x="30" y="18" font-size="14" font-weight="bold" text-anchor="middle">Done</text></g></svg>